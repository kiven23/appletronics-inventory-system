{"remainingRequest":"/var/www/html/new-project-portal/vue-main-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/new-project-portal/vue-main-front/src/components/inventory/settings.vue?vue&type=template&id=1bea7686&","dependencies":[{"path":"/var/www/html/new-project-portal/vue-main-front/src/components/inventory/settings.vue","mtime":1623919785872},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}