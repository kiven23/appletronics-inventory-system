{"remainingRequest":"/var/www/html/new-project-portal/vue-main-front/node_modules/babel-loader/lib/index.js!/var/www/html/new-project-portal/vue-main-front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/new-project-portal/vue-main-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/new-project-portal/vue-main-front/node_modules/vue-excel-export/VueComment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/vue-excel-export/VueComment.vue","mtime":499162500000},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/new-project-portal/vue-main-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["VueComment.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div\n            :id=\"idName\"\n            @click=\"generate\">\n        <slot>\n            Download {{name}}\n        </slot>\n    </div>\n</template>\n\n<script>\n    import download from \"browser-downloads\";\n\n    export default {\n        name: 'export-excel',\n        props: {\n            // mime type [xls, csv]\n            type: {\n                type: String,\n                default: \"xls\"\n            },\n            // Json to download\n            data: {\n                type: Array,\n                required: false,\n                default: null\n            },\n            // fields inside the Json Object that you want to export\n            // if no given, all the properties in the Json are exported\n            fields: {\n                type: Object,\n                required: false\n            },\n            // this prop is used to fix the problem with other components that use the\n            // variable fields, like vee-validate. exportFields works exactly like fields\n            exportFields: {\n                type: Object,\n                required: false\n            },\n            // Use as fallback when the row has no field values\n            defaultValue: {\n                type: String,\n                required: false,\n                default: \"\"\n            },\n            // Title(s) for the data, could be a string or an array of strings (multiple titles)\n            title: {\n                default: null\n            },\n            // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n            footer: {\n                default: null\n            },\n            // filename to export\n            name: {\n                type: String,\n                default: \"data.xls\"\n            },\n            fetch: {\n                type: Function,\n            },\n            meta: {\n                type: Array,\n                default: () => []\n            },\n            worksheet: {\n                type: String,\n                default: \"Sheet1\"\n            },\n            //event before generate was called\n            beforeGenerate: {\n                type: Function,\n            },\n            //event before download pops up\n            beforeFinish: {\n                type: Function,\n            },\n        },\n        computed: {\n            // unique identifier\n            idName() {\n                var now = new Date().getTime();\n                return \"export_\" + now;\n            },\n\n            downloadFields() {\n                if (this.fields !== undefined) return this.fields;\n\n                if (this.exportFields !== undefined) return this.exportFields;\n            }\n        },\n        methods: {\n            async generate() {\n                if (typeof this.beforeGenerate === 'function') {\n                    await this.beforeGenerate();\n                }\n                let data = this.data;\n                if (typeof this.fetch === 'function' || !data)\n                    data = await this.fetch();\n\n                if (!data || !data.length) {\n                    return;\n                }\n\n                let json = this.getProcessedJson(data, this.downloadFields);\n                if (this.type === \"html\") {\n                    // this is mainly for testing\n                    return this.export(\n                        this.jsonToXLS(json),\n                        this.name.replace(\".xls\", \".html\"),\n                        \"text/html\"\n                    );\n                } else if (this.type === \"csv\") {\n                    return this.export(\n                        this.jsonToCSV(json),\n                        this.name.replace(\".xls\", \".csv\"),\n                        \"application/csv\"\n                    );\n                }\n                return this.export(\n                    this.jsonToXLS(json),\n                    this.name,\n                    \"application/vnd.ms-excel\"\n                );\n            },\n            /*\n                Use downloadjs to generate the download link\n                */\n            export: async function (data, filename, mime) {\n                let blob = this.base64ToBlob(data, mime);\n                if (typeof this.beforeFinish === 'function')\n                    await this.beforeFinish();\n                download(blob, filename, mime);\n            },\n            /*\n                jsonToXLS\n                ---------------\n                Transform json data into an xml document with MS Excel format, sadly\n                it shows a prompt when it opens, that is a default behavior for\n                Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\n                */\n            jsonToXLS(data) {\n                let xlsTemp =\n                    '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n                let xlsData = \"<thead>\";\n                const colspan = Object.keys(data[0]).length;\n                let _self = this;\n\n                //Header\n                if (this.title != null) {\n                    xlsData += this.parseExtraData(\n                        this.title,\n                        '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\n                    );\n                }\n\n                //Fields\n                xlsData += \"<tr>\";\n                for (let key in data[0]) {\n                    xlsData += \"<th>\" + key + \"</th>\";\n                }\n                xlsData += \"</tr>\";\n                xlsData += \"</thead>\";\n\n                //Data\n                xlsData += \"<tbody>\";\n                data.map(function (item, index) {\n                    xlsData += \"<tr>\";\n                    for (let key in item) {\n                        xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[key]) + \"</td>\";\n                    }\n                    xlsData += \"</tr>\";\n                });\n                xlsData += \"</tbody>\";\n\n                //Footer\n                if (this.footer != null) {\n                    xlsData += \"<tfoot>\";\n                    xlsData += this.parseExtraData(\n                        this.footer,\n                        '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\n                    );\n                    xlsData += \"</tfoot>\";\n                }\n\n                return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\n            },\n            /*\n                jsonToCSV\n                ---------------\n                Transform json data into an CSV file.\n                */\n            jsonToCSV(data) {\n                var csvData = [];\n                //Header\n                if (this.title != null) {\n                    csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n                }\n                //Fields\n                for (let key in data[0]) {\n                    csvData.push(key);\n                    csvData.push(\",\");\n                }\n                csvData.pop();\n                csvData.push(\"\\r\\n\");\n                //Data\n                data.map(function (item) {\n                    for (let key in item) {\n                        let escapedCSV = '=\\\"' + item[key] + '\\\"'; // cast Numbers to string\n                        if (escapedCSV.match(/[,\"\\n]/)) {\n                            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n                        }\n                        csvData.push(escapedCSV);\n                        csvData.push(\",\");\n                    }\n                    csvData.pop();\n                    csvData.push(\"\\r\\n\");\n                });\n                //Footer\n                if (this.footer != null) {\n                    csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n                }\n                return csvData.join(\"\");\n            },\n            /*\n                getProcessedJson\n                ---------------\n                Get only the data to export, if no fields are set return all the data\n                */\n            getProcessedJson(data, header) {\n                let keys = this.getKeys(data, header);\n                let newData = [];\n                let _self = this;\n                data.map(function (item, index) {\n                    let newItem = {};\n                    for (let label in keys) {\n                        let property = keys[label];\n                        newItem[label] = _self.getValue(property, item);\n                    }\n                    newData.push(newItem);\n                });\n\n                return newData;\n            },\n            getKeys(data, header) {\n                if (header) {\n                    return header;\n                }\n\n                let keys = {};\n                for (let key in data[0]) {\n                    keys[key] = key;\n                }\n                return keys;\n            },\n            /*\n                parseExtraData\n                ---------------\n                Parse title and footer attribute to the csv format\n                */\n            parseExtraData(extraData, format) {\n                let parseData = \"\";\n                if (Array.isArray(extraData)) {\n                    for (var i = 0; i < extraData.length; i++) {\n                        parseData += format.replace(\"${data}\", extraData[i]);\n                    }\n                } else {\n                    parseData += format.replace(\"${data}\", extraData);\n                }\n                return parseData;\n            },\n\n            getValue(key, item) {\n                const field = typeof key !== \"object\" ? key : key.field;\n                let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n                let value = this.defaultValue;\n\n                if (!field)\n                    value = item;\n                else if (indexes.length > 1)\n                    value = this.getValueFromNestedItem(item, indexes);\n                else\n                    value = this.parseValue(item[field]);\n\n                if (key.hasOwnProperty('callback'))\n                    value = this.getValueFromCallback(value, key.callback);\n\n                return value;\n            },\n\n            /*\n            convert values with newline \\n characters into <br/>\n            */\n            valueReformattedForMultilines(value) {\n                if (typeof (value) == \"string\") return (value.replace(/\\n/ig, \"<br/>\"));\n                else return (value);\n            },\n\n            getValueFromNestedItem(item, indexes) {\n                let nestedItem = item;\n                for (let index of indexes) {\n                    if (nestedItem)\n                        nestedItem = nestedItem[index];\n                }\n                return this.parseValue(nestedItem);\n            },\n\n            getValueFromCallback(item, callback) {\n                if (typeof callback !== \"function\")\n                    return this.defaultValue\n                const value = callback(item);\n                return this.parseValue(value);\n            },\n            parseValue(value) {\n                return value || value === 0 || typeof value === 'boolean'\n                    ? value\n                    : this.defaultValue;\n            },\n            base64ToBlob(data, mime) {\n                let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n                let bstr = atob(base64);\n                let n = bstr.length;\n                let u8arr = new Uint8ClampedArray(n);\n                while (n--) {\n                    u8arr[n] = bstr.charCodeAt(n);\n                }\n                return new Blob([u8arr], {type: mime});\n            }\n        } // end methods\n    };\n</script>\n"],"sourceRoot":"node_modules/vue-excel-export"}]}